// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_game_2eproto_metadata_getter(int index);
class Bullet;
struct BulletDefaultTypeInternal;
extern BulletDefaultTypeInternal _Bullet_default_instance_;
class BulletSpawn;
struct BulletSpawnDefaultTypeInternal;
extern BulletSpawnDefaultTypeInternal _BulletSpawn_default_instance_;
class GameStateMessage;
struct GameStateMessageDefaultTypeInternal;
extern GameStateMessageDefaultTypeInternal _GameStateMessage_default_instance_;
class IsShot;
struct IsShotDefaultTypeInternal;
extern IsShotDefaultTypeInternal _IsShot_default_instance_;
class MovingDirection;
struct MovingDirectionDefaultTypeInternal;
extern MovingDirectionDefaultTypeInternal _MovingDirection_default_instance_;
class PlayerStat;
struct PlayerStatDefaultTypeInternal;
extern PlayerStatDefaultTypeInternal _PlayerStat_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Bullet* Arena::CreateMaybeMessage<::Bullet>(Arena*);
template<> ::BulletSpawn* Arena::CreateMaybeMessage<::BulletSpawn>(Arena*);
template<> ::GameStateMessage* Arena::CreateMaybeMessage<::GameStateMessage>(Arena*);
template<> ::IsShot* Arena::CreateMaybeMessage<::IsShot>(Arena*);
template<> ::MovingDirection* Arena::CreateMaybeMessage<::MovingDirection>(Arena*);
template<> ::PlayerStat* Arena::CreateMaybeMessage<::PlayerStat>(Arena*);
template<> ::Status* Arena::CreateMaybeMessage<::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PlayerStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerStat) */ {
 public:
  inline PlayerStat() : PlayerStat(nullptr) {}
  virtual ~PlayerStat();
  explicit constexpr PlayerStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerStat(const PlayerStat& from);
  PlayerStat(PlayerStat&& from) noexcept
    : PlayerStat() {
    *this = ::std::move(from);
  }

  inline PlayerStat& operator=(const PlayerStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerStat& operator=(PlayerStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerStat* internal_default_instance() {
    return reinterpret_cast<const PlayerStat*>(
               &_PlayerStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerStat& a, PlayerStat& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerStat* New() const final {
    return CreateMaybeMessage<PlayerStat>(nullptr);
  }

  PlayerStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerStat& from);
  void MergeFrom(const PlayerStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerStat";
  }
  protected:
  explicit PlayerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kHealthFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // uint32 health = 3;
  void clear_health();
  ::PROTOBUF_NAMESPACE_ID::uint32 health() const;
  void set_health(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_health() const;
  void _internal_set_health(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Bullet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Bullet) */ {
 public:
  inline Bullet() : Bullet(nullptr) {}
  virtual ~Bullet();
  explicit constexpr Bullet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bullet(const Bullet& from);
  Bullet(Bullet&& from) noexcept
    : Bullet() {
    *this = ::std::move(from);
  }

  inline Bullet& operator=(const Bullet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bullet& operator=(Bullet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bullet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bullet* internal_default_instance() {
    return reinterpret_cast<const Bullet*>(
               &_Bullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Bullet& a, Bullet& b) {
    a.Swap(&b);
  }
  inline void Swap(Bullet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bullet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bullet* New() const final {
    return CreateMaybeMessage<Bullet>(nullptr);
  }

  Bullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bullet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bullet& from);
  void MergeFrom(const Bullet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bullet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Bullet";
  }
  protected:
  explicit Bullet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kVxFieldNumber = 3,
    kVyFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float vx = 3;
  void clear_vx();
  float vx() const;
  void set_vx(float value);
  private:
  float _internal_vx() const;
  void _internal_set_vx(float value);
  public:

  // float vy = 4;
  void clear_vy();
  float vy() const;
  void set_vy(float value);
  private:
  float _internal_vy() const;
  void _internal_set_vy(float value);
  public:

  // @@protoc_insertion_point(class_scope:Bullet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float vx_;
  float vy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class BulletSpawn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BulletSpawn) */ {
 public:
  inline BulletSpawn() : BulletSpawn(nullptr) {}
  virtual ~BulletSpawn();
  explicit constexpr BulletSpawn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BulletSpawn(const BulletSpawn& from);
  BulletSpawn(BulletSpawn&& from) noexcept
    : BulletSpawn() {
    *this = ::std::move(from);
  }

  inline BulletSpawn& operator=(const BulletSpawn& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulletSpawn& operator=(BulletSpawn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BulletSpawn& default_instance() {
    return *internal_default_instance();
  }
  static inline const BulletSpawn* internal_default_instance() {
    return reinterpret_cast<const BulletSpawn*>(
               &_BulletSpawn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BulletSpawn& a, BulletSpawn& b) {
    a.Swap(&b);
  }
  inline void Swap(BulletSpawn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulletSpawn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BulletSpawn* New() const final {
    return CreateMaybeMessage<BulletSpawn>(nullptr);
  }

  BulletSpawn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BulletSpawn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BulletSpawn& from);
  void MergeFrom(const BulletSpawn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulletSpawn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BulletSpawn";
  }
  protected:
  explicit BulletSpawn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBulletFieldNumber = 1,
  };
  // .Bullet bullet = 1;
  bool has_bullet() const;
  private:
  bool _internal_has_bullet() const;
  public:
  void clear_bullet();
  const ::Bullet& bullet() const;
  ::Bullet* release_bullet();
  ::Bullet* mutable_bullet();
  void set_allocated_bullet(::Bullet* bullet);
  private:
  const ::Bullet& _internal_bullet() const;
  ::Bullet* _internal_mutable_bullet();
  public:
  void unsafe_arena_set_allocated_bullet(
      ::Bullet* bullet);
  ::Bullet* unsafe_arena_release_bullet();

  // @@protoc_insertion_point(class_scope:BulletSpawn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Bullet* bullet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class MovingDirection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MovingDirection) */ {
 public:
  inline MovingDirection() : MovingDirection(nullptr) {}
  virtual ~MovingDirection();
  explicit constexpr MovingDirection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovingDirection(const MovingDirection& from);
  MovingDirection(MovingDirection&& from) noexcept
    : MovingDirection() {
    *this = ::std::move(from);
  }

  inline MovingDirection& operator=(const MovingDirection& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovingDirection& operator=(MovingDirection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MovingDirection& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovingDirection* internal_default_instance() {
    return reinterpret_cast<const MovingDirection*>(
               &_MovingDirection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MovingDirection& a, MovingDirection& b) {
    a.Swap(&b);
  }
  inline void Swap(MovingDirection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovingDirection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MovingDirection* New() const final {
    return CreateMaybeMessage<MovingDirection>(nullptr);
  }

  MovingDirection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovingDirection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovingDirection& from);
  void MergeFrom(const MovingDirection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovingDirection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MovingDirection";
  }
  protected:
  explicit MovingDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVxFieldNumber = 1,
    kVyFieldNumber = 2,
  };
  // float vx = 1;
  void clear_vx();
  float vx() const;
  void set_vx(float value);
  private:
  float _internal_vx() const;
  void _internal_set_vx(float value);
  public:

  // float vy = 2;
  void clear_vy();
  float vy() const;
  void set_vy(float value);
  private:
  float _internal_vy() const;
  void _internal_set_vy(float value);
  public:

  // @@protoc_insertion_point(class_scope:MovingDirection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float vx_;
  float vy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class IsShot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IsShot) */ {
 public:
  inline IsShot() : IsShot(nullptr) {}
  virtual ~IsShot();
  explicit constexpr IsShot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsShot(const IsShot& from);
  IsShot(IsShot&& from) noexcept
    : IsShot() {
    *this = ::std::move(from);
  }

  inline IsShot& operator=(const IsShot& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsShot& operator=(IsShot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsShot& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsShot* internal_default_instance() {
    return reinterpret_cast<const IsShot*>(
               &_IsShot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IsShot& a, IsShot& b) {
    a.Swap(&b);
  }
  inline void Swap(IsShot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsShot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsShot* New() const final {
    return CreateMaybeMessage<IsShot>(nullptr);
  }

  IsShot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsShot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsShot& from);
  void MergeFrom(const IsShot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsShot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IsShot";
  }
  protected:
  explicit IsShot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IsShot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameStateMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameStateMessage) */ {
 public:
  inline GameStateMessage() : GameStateMessage(nullptr) {}
  virtual ~GameStateMessage();
  explicit constexpr GameStateMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameStateMessage(const GameStateMessage& from);
  GameStateMessage(GameStateMessage&& from) noexcept
    : GameStateMessage() {
    *this = ::std::move(from);
  }

  inline GameStateMessage& operator=(const GameStateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStateMessage& operator=(GameStateMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStateMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStateMessage* internal_default_instance() {
    return reinterpret_cast<const GameStateMessage*>(
               &_GameStateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameStateMessage& a, GameStateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStateMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStateMessage* New() const final {
    return CreateMaybeMessage<GameStateMessage>(nullptr);
  }

  GameStateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStateMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStateMessage& from);
  void MergeFrom(const GameStateMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStateMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameStateMessage";
  }
  protected:
  explicit GameStateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBulletsFieldNumber = 2,
    kPlayerStatFieldNumber = 1,
  };
  // repeated .Bullet bullets = 2;
  int bullets_size() const;
  private:
  int _internal_bullets_size() const;
  public:
  void clear_bullets();
  ::Bullet* mutable_bullets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bullet >*
      mutable_bullets();
  private:
  const ::Bullet& _internal_bullets(int index) const;
  ::Bullet* _internal_add_bullets();
  public:
  const ::Bullet& bullets(int index) const;
  ::Bullet* add_bullets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bullet >&
      bullets() const;

  // .PlayerStat playerStat = 1;
  bool has_playerstat() const;
  private:
  bool _internal_has_playerstat() const;
  public:
  void clear_playerstat();
  const ::PlayerStat& playerstat() const;
  ::PlayerStat* release_playerstat();
  ::PlayerStat* mutable_playerstat();
  void set_allocated_playerstat(::PlayerStat* playerstat);
  private:
  const ::PlayerStat& _internal_playerstat() const;
  ::PlayerStat* _internal_mutable_playerstat();
  public:
  void unsafe_arena_set_allocated_playerstat(
      ::PlayerStat* playerstat);
  ::PlayerStat* unsafe_arena_release_playerstat();

  // @@protoc_insertion_point(class_scope:GameStateMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bullet > bullets_;
  ::PlayerStat* playerstat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  virtual ~Status();
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_game_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerStat

// float x = 1;
inline void PlayerStat::clear_x() {
  x_ = 0;
}
inline float PlayerStat::_internal_x() const {
  return x_;
}
inline float PlayerStat::x() const {
  // @@protoc_insertion_point(field_get:PlayerStat.x)
  return _internal_x();
}
inline void PlayerStat::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PlayerStat::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PlayerStat.x)
}

// float y = 2;
inline void PlayerStat::clear_y() {
  y_ = 0;
}
inline float PlayerStat::_internal_y() const {
  return y_;
}
inline float PlayerStat::y() const {
  // @@protoc_insertion_point(field_get:PlayerStat.y)
  return _internal_y();
}
inline void PlayerStat::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PlayerStat::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PlayerStat.y)
}

// uint32 health = 3;
inline void PlayerStat::clear_health() {
  health_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerStat::_internal_health() const {
  return health_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlayerStat::health() const {
  // @@protoc_insertion_point(field_get:PlayerStat.health)
  return _internal_health();
}
inline void PlayerStat::_internal_set_health(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  health_ = value;
}
inline void PlayerStat::set_health(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:PlayerStat.health)
}

// -------------------------------------------------------------------

// Bullet

// float x = 1;
inline void Bullet::clear_x() {
  x_ = 0;
}
inline float Bullet::_internal_x() const {
  return x_;
}
inline float Bullet::x() const {
  // @@protoc_insertion_point(field_get:Bullet.x)
  return _internal_x();
}
inline void Bullet::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Bullet::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Bullet.x)
}

// float y = 2;
inline void Bullet::clear_y() {
  y_ = 0;
}
inline float Bullet::_internal_y() const {
  return y_;
}
inline float Bullet::y() const {
  // @@protoc_insertion_point(field_get:Bullet.y)
  return _internal_y();
}
inline void Bullet::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Bullet::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Bullet.y)
}

// float vx = 3;
inline void Bullet::clear_vx() {
  vx_ = 0;
}
inline float Bullet::_internal_vx() const {
  return vx_;
}
inline float Bullet::vx() const {
  // @@protoc_insertion_point(field_get:Bullet.vx)
  return _internal_vx();
}
inline void Bullet::_internal_set_vx(float value) {
  
  vx_ = value;
}
inline void Bullet::set_vx(float value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:Bullet.vx)
}

// float vy = 4;
inline void Bullet::clear_vy() {
  vy_ = 0;
}
inline float Bullet::_internal_vy() const {
  return vy_;
}
inline float Bullet::vy() const {
  // @@protoc_insertion_point(field_get:Bullet.vy)
  return _internal_vy();
}
inline void Bullet::_internal_set_vy(float value) {
  
  vy_ = value;
}
inline void Bullet::set_vy(float value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:Bullet.vy)
}

// -------------------------------------------------------------------

// BulletSpawn

// .Bullet bullet = 1;
inline bool BulletSpawn::_internal_has_bullet() const {
  return this != internal_default_instance() && bullet_ != nullptr;
}
inline bool BulletSpawn::has_bullet() const {
  return _internal_has_bullet();
}
inline void BulletSpawn::clear_bullet() {
  if (GetArena() == nullptr && bullet_ != nullptr) {
    delete bullet_;
  }
  bullet_ = nullptr;
}
inline const ::Bullet& BulletSpawn::_internal_bullet() const {
  const ::Bullet* p = bullet_;
  return p != nullptr ? *p : reinterpret_cast<const ::Bullet&>(
      ::_Bullet_default_instance_);
}
inline const ::Bullet& BulletSpawn::bullet() const {
  // @@protoc_insertion_point(field_get:BulletSpawn.bullet)
  return _internal_bullet();
}
inline void BulletSpawn::unsafe_arena_set_allocated_bullet(
    ::Bullet* bullet) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bullet_);
  }
  bullet_ = bullet;
  if (bullet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BulletSpawn.bullet)
}
inline ::Bullet* BulletSpawn::release_bullet() {
  
  ::Bullet* temp = bullet_;
  bullet_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Bullet* BulletSpawn::unsafe_arena_release_bullet() {
  // @@protoc_insertion_point(field_release:BulletSpawn.bullet)
  
  ::Bullet* temp = bullet_;
  bullet_ = nullptr;
  return temp;
}
inline ::Bullet* BulletSpawn::_internal_mutable_bullet() {
  
  if (bullet_ == nullptr) {
    auto* p = CreateMaybeMessage<::Bullet>(GetArena());
    bullet_ = p;
  }
  return bullet_;
}
inline ::Bullet* BulletSpawn::mutable_bullet() {
  // @@protoc_insertion_point(field_mutable:BulletSpawn.bullet)
  return _internal_mutable_bullet();
}
inline void BulletSpawn::set_allocated_bullet(::Bullet* bullet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bullet_;
  }
  if (bullet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bullet);
    if (message_arena != submessage_arena) {
      bullet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bullet, submessage_arena);
    }
    
  } else {
    
  }
  bullet_ = bullet;
  // @@protoc_insertion_point(field_set_allocated:BulletSpawn.bullet)
}

// -------------------------------------------------------------------

// MovingDirection

// float vx = 1;
inline void MovingDirection::clear_vx() {
  vx_ = 0;
}
inline float MovingDirection::_internal_vx() const {
  return vx_;
}
inline float MovingDirection::vx() const {
  // @@protoc_insertion_point(field_get:MovingDirection.vx)
  return _internal_vx();
}
inline void MovingDirection::_internal_set_vx(float value) {
  
  vx_ = value;
}
inline void MovingDirection::set_vx(float value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:MovingDirection.vx)
}

// float vy = 2;
inline void MovingDirection::clear_vy() {
  vy_ = 0;
}
inline float MovingDirection::_internal_vy() const {
  return vy_;
}
inline float MovingDirection::vy() const {
  // @@protoc_insertion_point(field_get:MovingDirection.vy)
  return _internal_vy();
}
inline void MovingDirection::_internal_set_vy(float value) {
  
  vy_ = value;
}
inline void MovingDirection::set_vy(float value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:MovingDirection.vy)
}

// -------------------------------------------------------------------

// IsShot

// -------------------------------------------------------------------

// GameStateMessage

// .PlayerStat playerStat = 1;
inline bool GameStateMessage::_internal_has_playerstat() const {
  return this != internal_default_instance() && playerstat_ != nullptr;
}
inline bool GameStateMessage::has_playerstat() const {
  return _internal_has_playerstat();
}
inline void GameStateMessage::clear_playerstat() {
  if (GetArena() == nullptr && playerstat_ != nullptr) {
    delete playerstat_;
  }
  playerstat_ = nullptr;
}
inline const ::PlayerStat& GameStateMessage::_internal_playerstat() const {
  const ::PlayerStat* p = playerstat_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerStat&>(
      ::_PlayerStat_default_instance_);
}
inline const ::PlayerStat& GameStateMessage::playerstat() const {
  // @@protoc_insertion_point(field_get:GameStateMessage.playerStat)
  return _internal_playerstat();
}
inline void GameStateMessage::unsafe_arena_set_allocated_playerstat(
    ::PlayerStat* playerstat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerstat_);
  }
  playerstat_ = playerstat;
  if (playerstat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameStateMessage.playerStat)
}
inline ::PlayerStat* GameStateMessage::release_playerstat() {
  
  ::PlayerStat* temp = playerstat_;
  playerstat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PlayerStat* GameStateMessage::unsafe_arena_release_playerstat() {
  // @@protoc_insertion_point(field_release:GameStateMessage.playerStat)
  
  ::PlayerStat* temp = playerstat_;
  playerstat_ = nullptr;
  return temp;
}
inline ::PlayerStat* GameStateMessage::_internal_mutable_playerstat() {
  
  if (playerstat_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerStat>(GetArena());
    playerstat_ = p;
  }
  return playerstat_;
}
inline ::PlayerStat* GameStateMessage::mutable_playerstat() {
  // @@protoc_insertion_point(field_mutable:GameStateMessage.playerStat)
  return _internal_mutable_playerstat();
}
inline void GameStateMessage::set_allocated_playerstat(::PlayerStat* playerstat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete playerstat_;
  }
  if (playerstat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(playerstat);
    if (message_arena != submessage_arena) {
      playerstat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerstat, submessage_arena);
    }
    
  } else {
    
  }
  playerstat_ = playerstat;
  // @@protoc_insertion_point(field_set_allocated:GameStateMessage.playerStat)
}

// repeated .Bullet bullets = 2;
inline int GameStateMessage::_internal_bullets_size() const {
  return bullets_.size();
}
inline int GameStateMessage::bullets_size() const {
  return _internal_bullets_size();
}
inline void GameStateMessage::clear_bullets() {
  bullets_.Clear();
}
inline ::Bullet* GameStateMessage::mutable_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:GameStateMessage.bullets)
  return bullets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bullet >*
GameStateMessage::mutable_bullets() {
  // @@protoc_insertion_point(field_mutable_list:GameStateMessage.bullets)
  return &bullets_;
}
inline const ::Bullet& GameStateMessage::_internal_bullets(int index) const {
  return bullets_.Get(index);
}
inline const ::Bullet& GameStateMessage::bullets(int index) const {
  // @@protoc_insertion_point(field_get:GameStateMessage.bullets)
  return _internal_bullets(index);
}
inline ::Bullet* GameStateMessage::_internal_add_bullets() {
  return bullets_.Add();
}
inline ::Bullet* GameStateMessage::add_bullets() {
  // @@protoc_insertion_point(field_add:GameStateMessage.bullets)
  return _internal_add_bullets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Bullet >&
GameStateMessage::bullets() const {
  // @@protoc_insertion_point(field_list:GameStateMessage.bullets)
  return bullets_;
}

// -------------------------------------------------------------------

// Status

// uint32 status = 1;
inline void Status::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Status::status() const {
  // @@protoc_insertion_point(field_get:Status.status)
  return _internal_status();
}
inline void Status::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void Status::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Status.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
