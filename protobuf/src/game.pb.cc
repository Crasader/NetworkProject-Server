// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace GameMessage {
constexpr PlayerStat::PlayerStat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , health_(0u){}
struct PlayerStatDefaultTypeInternal {
  constexpr PlayerStatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerStatDefaultTypeInternal() {}
  union {
    PlayerStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerStatDefaultTypeInternal _PlayerStat_default_instance_;
constexpr Bullet::Bullet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
  , x_(0)
  , y_(0)
  , vx_(0)
  , vy_(0){}
struct BulletDefaultTypeInternal {
  constexpr BulletDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BulletDefaultTypeInternal() {}
  union {
    Bullet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BulletDefaultTypeInternal _Bullet_default_instance_;
constexpr BulletSpawn::BulletSpawn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bullet_(nullptr){}
struct BulletSpawnDefaultTypeInternal {
  constexpr BulletSpawnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BulletSpawnDefaultTypeInternal() {}
  union {
    BulletSpawn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BulletSpawnDefaultTypeInternal _BulletSpawn_default_instance_;
constexpr MovingDirection::MovingDirection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vx_(0)
  , vy_(0){}
struct MovingDirectionDefaultTypeInternal {
  constexpr MovingDirectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MovingDirectionDefaultTypeInternal() {}
  union {
    MovingDirection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MovingDirectionDefaultTypeInternal _MovingDirection_default_instance_;
constexpr IsShot::IsShot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct IsShotDefaultTypeInternal {
  constexpr IsShotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IsShotDefaultTypeInternal() {}
  union {
    IsShot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IsShotDefaultTypeInternal _IsShot_default_instance_;
constexpr GameStateMessage::GameStateMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bullets_()
  , playerstat_(nullptr){}
struct GameStateMessageDefaultTypeInternal {
  constexpr GameStateMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameStateMessageDefaultTypeInternal() {}
  union {
    GameStateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameStateMessageDefaultTypeInternal _GameStateMessage_default_instance_;
constexpr Status::Status(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0u){}
struct StatusDefaultTypeInternal {
  constexpr StatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace GameMessage
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_game_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_game_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_game_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_game_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameMessage::PlayerStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMessage::PlayerStat, x_),
  PROTOBUF_FIELD_OFFSET(::GameMessage::PlayerStat, y_),
  PROTOBUF_FIELD_OFFSET(::GameMessage::PlayerStat, health_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameMessage::Bullet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMessage::Bullet, id_),
  PROTOBUF_FIELD_OFFSET(::GameMessage::Bullet, x_),
  PROTOBUF_FIELD_OFFSET(::GameMessage::Bullet, y_),
  PROTOBUF_FIELD_OFFSET(::GameMessage::Bullet, vx_),
  PROTOBUF_FIELD_OFFSET(::GameMessage::Bullet, vy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameMessage::BulletSpawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMessage::BulletSpawn, bullet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameMessage::MovingDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMessage::MovingDirection, vx_),
  PROTOBUF_FIELD_OFFSET(::GameMessage::MovingDirection, vy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameMessage::IsShot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameMessage::GameStateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMessage::GameStateMessage, playerstat_),
  PROTOBUF_FIELD_OFFSET(::GameMessage::GameStateMessage, bullets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameMessage::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameMessage::Status, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GameMessage::PlayerStat)},
  { 8, -1, sizeof(::GameMessage::Bullet)},
  { 18, -1, sizeof(::GameMessage::BulletSpawn)},
  { 24, -1, sizeof(::GameMessage::MovingDirection)},
  { 31, -1, sizeof(::GameMessage::IsShot)},
  { 36, -1, sizeof(::GameMessage::GameStateMessage)},
  { 43, -1, sizeof(::GameMessage::Status)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameMessage::_PlayerStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameMessage::_Bullet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameMessage::_BulletSpawn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameMessage::_MovingDirection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameMessage::_IsShot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameMessage::_GameStateMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GameMessage::_Status_default_instance_),
};

const char descriptor_table_protodef_game_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngame.proto\022\013GameMessage\"2\n\nPlayerStat\022"
  "\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\016\n\006health\030\004 \001(\r\"B\n"
  "\006Bullet\022\n\n\002id\030\001 \001(\005\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001("
  "\002\022\n\n\002vx\030\004 \001(\002\022\n\n\002vy\030\005 \001(\002\"2\n\013BulletSpawn"
  "\022#\n\006bullet\030\001 \001(\0132\023.GameMessage.Bullet\")\n"
  "\017MovingDirection\022\n\n\002vx\030\001 \001(\002\022\n\n\002vy\030\002 \001(\002"
  "\"\010\n\006IsShot\"e\n\020GameStateMessage\022+\n\nplayer"
  "Stat\030\001 \001(\0132\027.GameMessage.PlayerStat\022$\n\007b"
  "ullets\030\002 \003(\0132\023.GameMessage.Bullet\"\030\n\006Sta"
  "tus\022\016\n\006status\030\001 \001(\rb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_game_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto = {
  false, false, 387, descriptor_table_protodef_game_2eproto, "game.proto", 
  &descriptor_table_game_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_game_2eproto::offsets,
  file_level_metadata_game_2eproto, file_level_enum_descriptors_game_2eproto, file_level_service_descriptors_game_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_game_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return descriptor_table_game_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_game_2eproto(&descriptor_table_game_2eproto);
namespace GameMessage {

// ===================================================================

class PlayerStat::_Internal {
 public:
};

PlayerStat::PlayerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameMessage.PlayerStat)
}
PlayerStat::PlayerStat(const PlayerStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&health_) -
    reinterpret_cast<char*>(&x_)) + sizeof(health_));
  // @@protoc_insertion_point(copy_constructor:GameMessage.PlayerStat)
}

void PlayerStat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&health_) -
    reinterpret_cast<char*>(&x_)) + sizeof(health_));
}

PlayerStat::~PlayerStat() {
  // @@protoc_insertion_point(destructor:GameMessage.PlayerStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerStat::ArenaDtor(void* object) {
  PlayerStat* _this = reinterpret_cast< PlayerStat* >(object);
  (void)_this;
}
void PlayerStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerStat::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.PlayerStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&health_) -
      reinterpret_cast<char*>(&x_)) + sizeof(health_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 health = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.PlayerStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // uint32 health = 4;
  if (this->health() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_health(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.PlayerStat)
  return target;
}

size_t PlayerStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.PlayerStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 health = 4;
  if (this->health() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_health());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.PlayerStat)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.PlayerStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.PlayerStat)
    MergeFrom(*source);
  }
}

void PlayerStat::MergeFrom(const PlayerStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.PlayerStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.health() != 0) {
    _internal_set_health(from._internal_health());
  }
}

void PlayerStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.PlayerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerStat::CopyFrom(const PlayerStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.PlayerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerStat::IsInitialized() const {
  return true;
}

void PlayerStat::InternalSwap(PlayerStat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerStat, health_)
      + sizeof(PlayerStat::health_)
      - PROTOBUF_FIELD_OFFSET(PlayerStat, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerStat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Bullet::_Internal {
 public:
};

Bullet::Bullet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameMessage.Bullet)
}
Bullet::Bullet(const Bullet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vy_) -
    reinterpret_cast<char*>(&id_)) + sizeof(vy_));
  // @@protoc_insertion_point(copy_constructor:GameMessage.Bullet)
}

void Bullet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vy_) -
    reinterpret_cast<char*>(&id_)) + sizeof(vy_));
}

Bullet::~Bullet() {
  // @@protoc_insertion_point(destructor:GameMessage.Bullet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bullet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Bullet::ArenaDtor(void* object) {
  Bullet* _this = reinterpret_cast< Bullet* >(object);
  (void)_this;
}
void Bullet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bullet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bullet::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.Bullet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vy_) -
      reinterpret_cast<char*>(&id_)) + sizeof(vy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bullet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bullet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.Bullet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float vx = 4;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_vx(), target);
  }

  // float vy = 5;
  if (!(this->vy() <= 0 && this->vy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_vy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.Bullet)
  return target;
}

size_t Bullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.Bullet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float vx = 4;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    total_size += 1 + 4;
  }

  // float vy = 5;
  if (!(this->vy() <= 0 && this->vy() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bullet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.Bullet)
  GOOGLE_DCHECK_NE(&from, this);
  const Bullet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bullet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.Bullet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.Bullet)
    MergeFrom(*source);
  }
}

void Bullet::MergeFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.Bullet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.vx() <= 0 && from.vx() >= 0)) {
    _internal_set_vx(from._internal_vx());
  }
  if (!(from.vy() <= 0 && from.vy() >= 0)) {
    _internal_set_vy(from._internal_vy());
  }
}

void Bullet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.Bullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bullet::CopyFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.Bullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bullet::IsInitialized() const {
  return true;
}

void Bullet::InternalSwap(Bullet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bullet, vy_)
      + sizeof(Bullet::vy_)
      - PROTOBUF_FIELD_OFFSET(Bullet, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bullet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BulletSpawn::_Internal {
 public:
  static const ::GameMessage::Bullet& bullet(const BulletSpawn* msg);
};

const ::GameMessage::Bullet&
BulletSpawn::_Internal::bullet(const BulletSpawn* msg) {
  return *msg->bullet_;
}
BulletSpawn::BulletSpawn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameMessage.BulletSpawn)
}
BulletSpawn::BulletSpawn(const BulletSpawn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bullet()) {
    bullet_ = new ::GameMessage::Bullet(*from.bullet_);
  } else {
    bullet_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameMessage.BulletSpawn)
}

void BulletSpawn::SharedCtor() {
bullet_ = nullptr;
}

BulletSpawn::~BulletSpawn() {
  // @@protoc_insertion_point(destructor:GameMessage.BulletSpawn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BulletSpawn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bullet_;
}

void BulletSpawn::ArenaDtor(void* object) {
  BulletSpawn* _this = reinterpret_cast< BulletSpawn* >(object);
  (void)_this;
}
void BulletSpawn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BulletSpawn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BulletSpawn::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.BulletSpawn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bullet_ != nullptr) {
    delete bullet_;
  }
  bullet_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulletSpawn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameMessage.Bullet bullet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bullet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulletSpawn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.BulletSpawn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameMessage.Bullet bullet = 1;
  if (this->has_bullet()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bullet(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.BulletSpawn)
  return target;
}

size_t BulletSpawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.BulletSpawn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GameMessage.Bullet bullet = 1;
  if (this->has_bullet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bullet_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulletSpawn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.BulletSpawn)
  GOOGLE_DCHECK_NE(&from, this);
  const BulletSpawn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulletSpawn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.BulletSpawn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.BulletSpawn)
    MergeFrom(*source);
  }
}

void BulletSpawn::MergeFrom(const BulletSpawn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.BulletSpawn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bullet()) {
    _internal_mutable_bullet()->::GameMessage::Bullet::MergeFrom(from._internal_bullet());
  }
}

void BulletSpawn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.BulletSpawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulletSpawn::CopyFrom(const BulletSpawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.BulletSpawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletSpawn::IsInitialized() const {
  return true;
}

void BulletSpawn::InternalSwap(BulletSpawn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(bullet_, other->bullet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulletSpawn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MovingDirection::_Internal {
 public:
};

MovingDirection::MovingDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameMessage.MovingDirection)
}
MovingDirection::MovingDirection(const MovingDirection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vx_, &from.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&vy_) -
    reinterpret_cast<char*>(&vx_)) + sizeof(vy_));
  // @@protoc_insertion_point(copy_constructor:GameMessage.MovingDirection)
}

void MovingDirection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vy_) -
    reinterpret_cast<char*>(&vx_)) + sizeof(vy_));
}

MovingDirection::~MovingDirection() {
  // @@protoc_insertion_point(destructor:GameMessage.MovingDirection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MovingDirection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MovingDirection::ArenaDtor(void* object) {
  MovingDirection* _this = reinterpret_cast< MovingDirection* >(object);
  (void)_this;
}
void MovingDirection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovingDirection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MovingDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.MovingDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vy_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(vy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovingDirection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float vx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingDirection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.MovingDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float vx = 1;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_vx(), target);
  }

  // float vy = 2;
  if (!(this->vy() <= 0 && this->vy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_vy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.MovingDirection)
  return target;
}

size_t MovingDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.MovingDirection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float vx = 1;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    total_size += 1 + 4;
  }

  // float vy = 2;
  if (!(this->vy() <= 0 && this->vy() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovingDirection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.MovingDirection)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingDirection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovingDirection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.MovingDirection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.MovingDirection)
    MergeFrom(*source);
  }
}

void MovingDirection::MergeFrom(const MovingDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.MovingDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.vx() <= 0 && from.vx() >= 0)) {
    _internal_set_vx(from._internal_vx());
  }
  if (!(from.vy() <= 0 && from.vy() >= 0)) {
    _internal_set_vy(from._internal_vy());
  }
}

void MovingDirection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.MovingDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingDirection::CopyFrom(const MovingDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.MovingDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingDirection::IsInitialized() const {
  return true;
}

void MovingDirection::InternalSwap(MovingDirection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovingDirection, vy_)
      + sizeof(MovingDirection::vy_)
      - PROTOBUF_FIELD_OFFSET(MovingDirection, vx_)>(
          reinterpret_cast<char*>(&vx_),
          reinterpret_cast<char*>(&other->vx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingDirection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IsShot::_Internal {
 public:
};

IsShot::IsShot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameMessage.IsShot)
}
IsShot::IsShot(const IsShot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameMessage.IsShot)
}

void IsShot::SharedCtor() {
}

IsShot::~IsShot() {
  // @@protoc_insertion_point(destructor:GameMessage.IsShot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsShot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsShot::ArenaDtor(void* object) {
  IsShot* _this = reinterpret_cast< IsShot* >(object);
  (void)_this;
}
void IsShot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsShot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IsShot::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.IsShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsShot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsShot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.IsShot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.IsShot)
  return target;
}

size_t IsShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.IsShot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsShot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.IsShot)
  GOOGLE_DCHECK_NE(&from, this);
  const IsShot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsShot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.IsShot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.IsShot)
    MergeFrom(*source);
  }
}

void IsShot::MergeFrom(const IsShot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.IsShot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IsShot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.IsShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsShot::CopyFrom(const IsShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.IsShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsShot::IsInitialized() const {
  return true;
}

void IsShot::InternalSwap(IsShot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsShot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GameStateMessage::_Internal {
 public:
  static const ::GameMessage::PlayerStat& playerstat(const GameStateMessage* msg);
};

const ::GameMessage::PlayerStat&
GameStateMessage::_Internal::playerstat(const GameStateMessage* msg) {
  return *msg->playerstat_;
}
GameStateMessage::GameStateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bullets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameMessage.GameStateMessage)
}
GameStateMessage::GameStateMessage(const GameStateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bullets_(from.bullets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerstat()) {
    playerstat_ = new ::GameMessage::PlayerStat(*from.playerstat_);
  } else {
    playerstat_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameMessage.GameStateMessage)
}

void GameStateMessage::SharedCtor() {
playerstat_ = nullptr;
}

GameStateMessage::~GameStateMessage() {
  // @@protoc_insertion_point(destructor:GameMessage.GameStateMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameStateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete playerstat_;
}

void GameStateMessage::ArenaDtor(void* object) {
  GameStateMessage* _this = reinterpret_cast< GameStateMessage* >(object);
  (void)_this;
}
void GameStateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameStateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameStateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.GameStateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bullets_.Clear();
  if (GetArena() == nullptr && playerstat_ != nullptr) {
    delete playerstat_;
  }
  playerstat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GameMessage.PlayerStat playerStat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerstat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GameMessage.Bullet bullets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bullets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.GameStateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GameMessage.PlayerStat playerStat = 1;
  if (this->has_playerstat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::playerstat(this), target, stream);
  }

  // repeated .GameMessage.Bullet bullets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bullets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bullets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.GameStateMessage)
  return target;
}

size_t GameStateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.GameStateMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameMessage.Bullet bullets = 2;
  total_size += 1UL * this->_internal_bullets_size();
  for (const auto& msg : this->bullets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .GameMessage.PlayerStat playerStat = 1;
  if (this->has_playerstat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerstat_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStateMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.GameStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStateMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStateMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.GameStateMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.GameStateMessage)
    MergeFrom(*source);
  }
}

void GameStateMessage::MergeFrom(const GameStateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.GameStateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bullets_.MergeFrom(from.bullets_);
  if (from.has_playerstat()) {
    _internal_mutable_playerstat()->::GameMessage::PlayerStat::MergeFrom(from._internal_playerstat());
  }
}

void GameStateMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.GameStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStateMessage::CopyFrom(const GameStateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.GameStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStateMessage::IsInitialized() const {
  return true;
}

void GameStateMessage::InternalSwap(GameStateMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bullets_.InternalSwap(&other->bullets_);
  swap(playerstat_, other->playerstat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStateMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameMessage.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:GameMessage.Status)
}

void Status::SharedCtor() {
status_ = 0u;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:GameMessage.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:GameMessage.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameMessage.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameMessage.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameMessage.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameMessage.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameMessage.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameMessage.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameMessage.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameMessage.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameMessage.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameMessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameMessage::PlayerStat* Arena::CreateMaybeMessage< ::GameMessage::PlayerStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameMessage::PlayerStat >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMessage::Bullet* Arena::CreateMaybeMessage< ::GameMessage::Bullet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameMessage::Bullet >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMessage::BulletSpawn* Arena::CreateMaybeMessage< ::GameMessage::BulletSpawn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameMessage::BulletSpawn >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMessage::MovingDirection* Arena::CreateMaybeMessage< ::GameMessage::MovingDirection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameMessage::MovingDirection >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMessage::IsShot* Arena::CreateMaybeMessage< ::GameMessage::IsShot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameMessage::IsShot >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMessage::GameStateMessage* Arena::CreateMaybeMessage< ::GameMessage::GameStateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameMessage::GameStateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GameMessage::Status* Arena::CreateMaybeMessage< ::GameMessage::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameMessage::Status >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
